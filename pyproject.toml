[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "django-asset-manager"
version = "0.1"
description = "Django app for managing assets."
readme = "README.md"
license.file = "LICENSE"
authors = [
  { name = "Mugdha Arunim Ahmed", email = "mugdhaarunimahmed2017@gmail.com" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",
  "License :: OSI Approved :: MIT License",
  "Environment :: Web Environment",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Framework :: Django",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Framework :: Django :: 5.1",
]
keywords = ["django", "static"]
dependencies = ["django>=4.2,<6"]

[project.optional-dependencies]
test = [
  "pytest>=8.3.3",
  "pytest-cov>=5.0.0",
  "pytest-django>=4.9.0",
  "pytest-xdist>=3.6.1",
]

[tool.uv]
dev-dependencies = ["django-stubs", "ruff"]

[tool.hatch.build.targets.wheel]
packages = ["src/asset_manager"]

[tool.pytest.ini_options]
pythonpath = [".", "src"]
testpaths = ["tests"]
addopts = '--cov --cov-report=html --cov-report=term'
log_cli = true

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = ["*/migrations/*", "*/tests/*", "*/conftest.py"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "raise NotImplementedError",
  "pass",
  "if __name__ == .__main__.:",
]

[tool.basedpyright]
typeCheckingMode = "basic"
venvPath = "."
venv = ".venv"
exclude = [".venv"]

[tool.ruff]
extend-exclude = ["**/migrations/**/*.py"]
preview = true
show-fixes = true
target-version = "py312"
unsafe-fixes = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
  "F",   # pyflakes
  "E",   # pycodestyle
  "W",   # pycodestyle
  "C90", # mccabe
  "I",   # isort
  "N",   # pep8-naming
  # "D", # pydocstyle
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC", # flake8-async
  "S",     # flake8-bandit
  "BLE",   # flake8-blind-except
  "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  "COM",   # flake8-commas
  # "CPY", # flake8-copyright
  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "T10",  # flake8-debugger
  "DJ",   # flake8-django
  "EM",   # flake8-errmsg
  "EXE",  # flake8-executable
  "FA",   # flake8-future-annotations
  'ISC',  # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "LOG",  # flake8-logging
  "G",    # flake8-logging-format
  'INP',  # flake8-no-pep420
  'PIE',  # flake8-pie
  "T20",  # flake8-print
  'PYI',  # flake8-pyi
  'PT',   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TCH",  # flake8-type-checking
  "INT",  # flake8-gettext
  # "ARG", # flake8-unused-arguments: Unused function argument
  "PTH", # flake8-use-pathlib
  "TD",  # flake8-todos
  "FIX", # flake8-fixme
  "ERA", # eradicate
  "PD",  # pandas-vet
  "PGH", # pygrep-hooks
  "PL",  # Pylint
  "TRY", # tryceratops
  "FLY", # flynt
  # "NPY", # NumPy-specific rules
  # "FAST", # FastAPI
  # "AIR", # Airflow
  "PERF", # Perflint
  # "FURB", # refurb
  # "DOC", # pydoclint
  "RUF", # Ruff-specific rules
]
ignore = [
  "COM812", # missing-tailing-comma: conflicts with ruff format
  "ISC001", # single-line-implicit-string-concatenation: conflicts with ruff format
  "RUF012", # mutable-class-default: annoying to fix
  "SIM102", # collapsible-if: sometimes it's better to nest
]
unfixable = ["F401"]
[tool.ruff.extend-per-file-ignores]
"tests/*" = [
  "S101",    # Use of assert detected
  "PLR2004", # Magic value used in comparison
  "S106",    # Possible hardcoded password
  "ARG001",  # Unused function argument
  "PT004",   # Fixture does not return anything, add leading underscore
  "PT011",   # pytest.raises() block should contain a single simple statement
]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
detect-same-package = true
force-sort-within-sections = true
force-wrap-aliases = true
known-first-party = ["django"]
known-local-folder = ["asset_manager"]
